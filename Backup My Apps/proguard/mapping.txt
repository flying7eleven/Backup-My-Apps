com.dropbox.client2.DropboxAPI -> com.dropbox.client2.a:
    com.dropbox.client2.session.Session session -> a
    com.dropbox.client2.session.Session getSession() -> a
    com.dropbox.client2.DropboxAPI$DropboxFileInfo getFile(java.lang.String,java.lang.String,java.io.OutputStream,com.dropbox.client2.ProgressListener) -> a
    com.dropbox.client2.DropboxAPI$DropboxInputStream getFileStream(java.lang.String,java.lang.String) -> a
    com.dropbox.client2.DropboxAPI$Entry putFileOverwrite(java.lang.String,java.io.InputStream,long,com.dropbox.client2.ProgressListener) -> a
    com.dropbox.client2.DropboxAPI$UploadRequest putFileOverwriteRequest(java.lang.String,java.io.InputStream,long,com.dropbox.client2.ProgressListener) -> b
    com.dropbox.client2.DropboxAPI$Entry metadata(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> a
    void assertAuthenticated() -> b
    long getFromMapAsLong(java.util.Map,java.lang.String) -> a
    boolean getFromMapAsBoolean(java.util.Map,java.lang.String) -> b
    com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener) -> a
com.dropbox.client2.DropboxAPI$1 -> com.dropbox.client2.g:
com.dropbox.client2.DropboxAPI$DropboxFileInfo -> com.dropbox.client2.j:
    java.lang.String mimeType -> a
    long length -> b
    java.lang.String charset -> c
    long getContentLength() -> a
    long access$100(com.dropbox.client2.DropboxAPI$DropboxFileInfo) -> a
com.dropbox.client2.DropboxAPI$DropboxInputStream -> com.dropbox.client2.k:
    org.apache.http.client.methods.HttpUriRequest request -> a
    com.dropbox.client2.DropboxAPI$DropboxFileInfo info -> b
    void close() -> close
    com.dropbox.client2.DropboxAPI$DropboxFileInfo getFileInfo() -> a
    void copyStreamToOutput(java.io.OutputStream,com.dropbox.client2.ProgressListener) -> a
com.dropbox.client2.DropboxAPI$Entry -> com.dropbox.client2.d:
    long bytes -> a
    java.lang.String hash -> b
    java.lang.String icon -> c
    boolean isDir -> d
    java.lang.String modified -> e
    java.lang.String path -> f
    java.lang.String root -> g
    java.lang.String size -> h
    java.lang.String mimeType -> i
    java.lang.String rev -> j
    boolean thumbExists -> k
    boolean isDeleted -> l
    java.util.List contents -> m
com.dropbox.client2.DropboxAPI$RequestAndResponse -> com.dropbox.client2.f:
    org.apache.http.client.methods.HttpUriRequest request -> a
    org.apache.http.HttpResponse response -> b
com.dropbox.client2.DropboxAPI$UploadRequest -> com.dropbox.client2.b:
    org.apache.http.client.methods.HttpUriRequest request -> a
    com.dropbox.client2.session.Session session -> b
    com.dropbox.client2.DropboxAPI$Entry upload() -> a
com.dropbox.client2.ProgressListener -> com.dropbox.client2.i:
    void onProgress(long,long) -> a
    long progressInterval() -> a
com.dropbox.client2.ProgressListener$ProgressHttpEntity -> com.dropbox.client2.h:
    com.dropbox.client2.ProgressListener listener -> a
    long length -> b
    void writeTo(java.io.OutputStream) -> writeTo
    com.dropbox.client2.ProgressListener access$000(com.dropbox.client2.ProgressListener$ProgressHttpEntity) -> a
    long access$100(com.dropbox.client2.ProgressListener$ProgressHttpEntity) -> b
com.dropbox.client2.ProgressListener$ProgressHttpEntity$CountingOutputStream -> com.dropbox.client2.c:
    long lastListened -> b
    long intervalMs -> c
    long transferred -> d
    com.dropbox.client2.ProgressListener$ProgressHttpEntity this$0 -> a
    void write(byte[],int,int) -> write
    void write(int) -> write
com.dropbox.client2.RESTUtility -> com.dropbox.client2.l:
    java.text.DateFormat dateFormat -> a
    java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session) -> a
    com.dropbox.client2.DropboxAPI$RequestAndResponse streamRequest(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session) -> b
    java.lang.Object parseAsJSON(org.apache.http.HttpResponse) -> a
    org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest) -> a
    org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int) -> a
    java.lang.String buildURL(java.lang.String,int,java.lang.String,java.lang.String[]) -> a
    org.apache.http.client.HttpClient updatedHttpClient(com.dropbox.client2.session.Session) -> a
    void updateClientProxy(org.apache.http.client.HttpClient,com.dropbox.client2.session.Session) -> a
    java.lang.String urlencode(java.lang.String[]) -> a
com.dropbox.client2.RESTUtility$RequestMethod -> com.dropbox.client2.e:
    com.dropbox.client2.RESTUtility$RequestMethod GET -> a
    com.dropbox.client2.RESTUtility$RequestMethod POST -> b
    com.dropbox.client2.RESTUtility$RequestMethod[] $VALUES -> c
    com.dropbox.client2.RESTUtility$RequestMethod[] values() -> values
    com.dropbox.client2.RESTUtility$RequestMethod valueOf(java.lang.String) -> valueOf
com.dropbox.client2.android.AndroidAuthSession -> com.dropbox.client2.android.b:
    void startAuthentication(android.content.Context) -> a
    boolean authenticationSuccessful() -> j
    java.lang.String finishAuthentication() -> k
com.dropbox.client2.android.AndroidAuthSession$1 -> com.dropbox.client2.android.a:
    com.dropbox.client2.android.AndroidAuthSession this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.dropbox.client2.android.AuthActivity -> com.dropbox.client2.android.AuthActivity:
    android.content.Intent lastResult -> a
    java.lang.String consumerKey -> b
    java.lang.String consumerSecret -> c
    boolean hasDelegated -> d
    boolean gotNewIntent -> e
    java.lang.String[] DROPBOX_APP_SIGNATURES -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onResume() -> onResume
    void onNewIntent(android.content.Intent) -> onNewIntent
    java.lang.String getConsumerSig() -> a
    boolean hasDropboxApp(android.content.Intent) -> a
    void startWebAuth() -> b
com.dropbox.client2.exception.DropboxException -> com.dropbox.client2.b.c:
com.dropbox.client2.exception.DropboxIOException -> com.dropbox.client2.b.i:
com.dropbox.client2.exception.DropboxLocalStorageFullException -> com.dropbox.client2.b.f:
com.dropbox.client2.exception.DropboxParseException -> com.dropbox.client2.b.h:
    java.lang.String body -> a
    java.lang.String toString() -> toString
com.dropbox.client2.exception.DropboxPartialFileException -> com.dropbox.client2.b.d:
    long bytesTransferred -> a
com.dropbox.client2.exception.DropboxSSLException -> com.dropbox.client2.b.e:
com.dropbox.client2.exception.DropboxServerException -> com.dropbox.client2.b.g:
    com.dropbox.client2.exception.DropboxServerException$Error body -> a
    int error -> b
    java.lang.String reason -> c
    java.lang.String server -> d
    java.lang.String location -> e
    java.lang.String toString() -> toString
    boolean isValidWithNullBody(org.apache.http.HttpResponse) -> a
    java.lang.String getHeader(org.apache.http.HttpResponse,java.lang.String) -> a
com.dropbox.client2.exception.DropboxServerException$Error -> com.dropbox.client2.b.b:
    java.lang.String error -> a
    java.lang.String userError -> b
com.dropbox.client2.exception.DropboxUnlinkedException -> com.dropbox.client2.b.a:
com.dropbox.client2.session.AbstractSession -> com.dropbox.client2.a.c:
    com.dropbox.client2.session.Session$AccessType accessType -> a
    com.dropbox.client2.session.AppKeyPair appKeyPair -> b
    com.dropbox.client2.session.AccessTokenPair accessTokenPair -> c
    org.apache.http.client.HttpClient client -> d
    void setAccessTokenPair(com.dropbox.client2.session.AccessTokenPair) -> a
    com.dropbox.client2.session.AppKeyPair getAppKeyPair() -> a
    com.dropbox.client2.session.AccessTokenPair getAccessTokenPair() -> b
    com.dropbox.client2.session.Session$AccessType getAccessType() -> c
    java.util.Locale getLocale() -> d
    boolean isLinked() -> e
    void sign(org.apache.http.HttpRequest) -> a
    java.lang.String buildOAuthHeader(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.AccessTokenPair) -> a
    java.lang.String encode(java.lang.String) -> a
    com.dropbox.client2.session.Session$ProxyInfo getProxyInfo() -> f
    org.apache.http.client.HttpClient getHttpClient() -> g
    void setRequestTimeout(org.apache.http.client.methods.HttpUriRequest) -> a
    java.lang.String getAPIServer() -> h
    java.lang.String getContentServer() -> i
com.dropbox.client2.session.AbstractSession$1 -> com.dropbox.client2.a.a:
    com.dropbox.client2.session.AbstractSession this$0 -> a
    int getMaxForRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxForRoute
com.dropbox.client2.session.AbstractSession$2 -> com.dropbox.client2.a.d:
    com.dropbox.client2.session.AbstractSession this$0 -> a
    org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy() -> createConnectionKeepAliveStrategy
com.dropbox.client2.session.AbstractSession$DBClientConnManager -> com.dropbox.client2.a.g:
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
com.dropbox.client2.session.AbstractSession$DBKeepAliveStrategy -> com.dropbox.client2.a.f:
    long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getKeepAliveDuration
com.dropbox.client2.session.AbstractSession$IdleConnectionCloserThread -> com.dropbox.client2.a.i:
    com.dropbox.client2.session.AbstractSession$DBClientConnManager manager -> a
    int idleTimeoutSeconds -> b
    int checkIntervalMs -> c
    com.dropbox.client2.session.AbstractSession$IdleConnectionCloserThread thread -> d
    void ensureRunning(com.dropbox.client2.session.AbstractSession$DBClientConnManager,int,int) -> a
    void run() -> run
com.dropbox.client2.session.AccessTokenPair -> com.dropbox.client2.a.j:
com.dropbox.client2.session.AppKeyPair -> com.dropbox.client2.a.k:
com.dropbox.client2.session.Session -> com.dropbox.client2.a.l:
    com.dropbox.client2.session.Session$AccessType getAccessType() -> c
    java.util.Locale getLocale() -> d
    boolean isLinked() -> e
    void sign(org.apache.http.HttpRequest) -> a
    com.dropbox.client2.session.Session$ProxyInfo getProxyInfo() -> f
    org.apache.http.client.HttpClient getHttpClient() -> g
    void setRequestTimeout(org.apache.http.client.methods.HttpUriRequest) -> a
    java.lang.String getAPIServer() -> h
    java.lang.String getContentServer() -> i
com.dropbox.client2.session.Session$AccessType -> com.dropbox.client2.a.h:
    com.dropbox.client2.session.Session$AccessType DROPBOX -> a
    com.dropbox.client2.session.Session$AccessType APP_FOLDER -> b
    java.lang.String urlPart -> c
    com.dropbox.client2.session.Session$AccessType[] $VALUES -> d
    com.dropbox.client2.session.Session$AccessType[] values() -> values
    com.dropbox.client2.session.Session$AccessType valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
com.dropbox.client2.session.Session$ProxyInfo -> com.dropbox.client2.a.e:
    java.lang.String host -> a
    int port -> b
com.dropbox.client2.session.TokenPair -> com.dropbox.client2.a.b:
    java.lang.String key -> a
    java.lang.String secret -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean equals(com.dropbox.client2.session.TokenPair) -> a
    java.lang.String toString() -> toString
com.google.android.apps.analytics.AnalyticsParameterEncoder -> com.google.android.apps.analytics.h:
    java.lang.String encode(java.lang.String) -> a
    java.lang.String encode(java.lang.String,java.lang.String) -> a
com.google.android.apps.analytics.AnalyticsReceiver -> com.google.android.apps.analytics.AnalyticsReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.google.android.apps.analytics.CustomVariable -> com.google.android.apps.analytics.i:
    int scope -> a
    java.lang.String name -> b
    java.lang.String value -> c
    int index -> d
    int getScope() -> a
    java.lang.String getName() -> b
    java.lang.String getValue() -> c
    int getIndex() -> d
com.google.android.apps.analytics.CustomVariableBuffer -> com.google.android.apps.analytics.s:
    com.google.android.apps.analytics.CustomVariable[] customVariables -> a
    boolean isIndexAvailable(int) -> a
    void setCustomVariable(com.google.android.apps.analytics.CustomVariable) -> a
    com.google.android.apps.analytics.CustomVariable getCustomVariableAt(int) -> b
    com.google.android.apps.analytics.CustomVariable[] getCustomVariableArray() -> a
    void throwOnInvalidIndex(int) -> c
    boolean hasCustomVariables() -> b
com.google.android.apps.analytics.Dispatcher -> com.google.android.apps.analytics.c:
    void dispatchHits(com.google.android.apps.analytics.Hit[]) -> a
    void init(com.google.android.apps.analytics.Dispatcher$Callbacks) -> a
    void stop() -> a
    void setDryRun(boolean) -> a
com.google.android.apps.analytics.Dispatcher$Callbacks -> com.google.android.apps.analytics.ad:
    void hitDispatched(long) -> a
    void dispatchFinished() -> a
com.google.android.apps.analytics.Event -> com.google.android.apps.analytics.v:
    long eventId -> a
    java.lang.String accountId -> b
    int randomVal -> j
    int timestampFirst -> k
    int timestampPrevious -> l
    int timestampCurrent -> m
    int visits -> n
    int userId -> o
    boolean anonymizeIp -> p
    java.lang.String category -> c
    java.lang.String action -> d
    java.lang.String label -> e
    int value -> f
    int screenWidth -> g
    int screenHeight -> h
    com.google.android.apps.analytics.CustomVariableBuffer customVariableBuffer -> i
    com.google.android.apps.analytics.Transaction transaction -> q
    com.google.android.apps.analytics.Item item -> r
    void setRandomVal(int) -> a
    int getRandomVal() -> a
    void setTimestampFirst(int) -> b
    int getTimestampFirst() -> b
    void setTimestampPrevious(int) -> c
    int getTimestampPrevious() -> c
    void setTimestampCurrent(int) -> d
    int getTimestampCurrent() -> d
    void setVisits(int) -> e
    int getVisits() -> e
    void setUserId(int) -> f
    int getUserId() -> f
    void setAnonymizeIp(boolean) -> a
    boolean getAnonymizeIp() -> g
    java.lang.String toString() -> toString
    com.google.android.apps.analytics.CustomVariableBuffer getCustomVariableBuffer() -> h
    void setCustomVariableBuffer(com.google.android.apps.analytics.CustomVariableBuffer) -> a
    com.google.android.apps.analytics.Transaction getTransaction() -> i
    void setTransaction(com.google.android.apps.analytics.Transaction) -> a
    com.google.android.apps.analytics.Item getItem() -> j
    void setItem(com.google.android.apps.analytics.Item) -> a
    boolean isSessionInitialized() -> k
com.google.android.apps.analytics.GoogleAnalyticsTracker -> com.google.android.apps.analytics.d:
    com.google.android.apps.analytics.GoogleAnalyticsTracker INSTANCE -> a
    boolean debug -> b
    boolean dryRun -> c
    boolean anonymizeIp -> d
    int sampleRate -> e
    java.lang.String accountId -> f
    android.content.Context parent -> g
    android.net.ConnectivityManager connetivityManager -> h
    java.lang.String userAgentProduct -> i
    java.lang.String userAgentVersion -> j
    int dispatchPeriod -> k
    com.google.android.apps.analytics.HitStore hitStore -> l
    com.google.android.apps.analytics.Dispatcher dispatcher -> m
    boolean powerSaveMode -> n
    boolean dispatcherIsBusy -> o
    com.google.android.apps.analytics.CustomVariableBuffer customVariableBuffer -> p
    java.util.Map transactionMap -> q
    java.util.Map itemMap -> r
    android.os.Handler handler -> s
    java.lang.Runnable dispatchRunner -> t
    com.google.android.apps.analytics.GoogleAnalyticsTracker getInstance() -> a
    void startNewSession(java.lang.String,int,android.content.Context) -> a
    void start(java.lang.String,int,android.content.Context,boolean) -> a
    void start(java.lang.String,int,android.content.Context,com.google.android.apps.analytics.HitStore,com.google.android.apps.analytics.Dispatcher,boolean) -> a
    void start(java.lang.String,int,android.content.Context,com.google.android.apps.analytics.HitStore,com.google.android.apps.analytics.Dispatcher,boolean,com.google.android.apps.analytics.Dispatcher$Callbacks) -> a
    void trackPageView(java.lang.String) -> a
    void createEvent(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int) -> a
    void setDispatchPeriod(int) -> a
    void maybeScheduleNextDispatch() -> g
    void cancelPendingDispatches() -> h
    void resetPowerSaveMode() -> i
    boolean dispatch() -> b
    void dispatchFinished() -> c
    void stopSession() -> d
    void stop() -> e
    boolean getDebug() -> f
    android.os.Handler access$000(com.google.android.apps.analytics.GoogleAnalyticsTracker) -> a
    com.google.android.apps.analytics.HitStore access$100(com.google.android.apps.analytics.GoogleAnalyticsTracker) -> b
com.google.android.apps.analytics.GoogleAnalyticsTracker$1 -> com.google.android.apps.analytics.k:
    com.google.android.apps.analytics.GoogleAnalyticsTracker this$0 -> a
    void run() -> run
com.google.android.apps.analytics.GoogleAnalyticsTracker$DispatcherCallbacks -> com.google.android.apps.analytics.p:
    com.google.android.apps.analytics.GoogleAnalyticsTracker this$0 -> a
    void dispatchFinished() -> a
    void hitDispatched(long) -> a
com.google.android.apps.analytics.GoogleAnalyticsTracker$DispatcherCallbacks$1 -> com.google.android.apps.analytics.m:
    com.google.android.apps.analytics.GoogleAnalyticsTracker$DispatcherCallbacks this$1 -> a
    void run() -> run
com.google.android.apps.analytics.Hit -> com.google.android.apps.analytics.o:
    java.lang.String hitString -> a
    long hitId -> b
com.google.android.apps.analytics.HitBuilder -> com.google.android.apps.analytics.g:
    java.lang.String constructPageviewRequestPath(com.google.android.apps.analytics.Event,com.google.android.apps.analytics.Referrer) -> c
    java.lang.String constructEventRequestPath(com.google.android.apps.analytics.Event,com.google.android.apps.analytics.Referrer) -> d
    void appendStringValue(java.lang.StringBuilder,java.lang.String,java.lang.String) -> a
    void appendCurrencyValue(java.lang.StringBuilder,java.lang.String,double) -> a
    java.lang.String constructTransactionRequestPath(com.google.android.apps.analytics.Event,com.google.android.apps.analytics.Referrer) -> e
    java.lang.String constructItemRequestPath(com.google.android.apps.analytics.Event,com.google.android.apps.analytics.Referrer) -> f
    java.lang.String constructHitRequestPath(com.google.android.apps.analytics.Event,com.google.android.apps.analytics.Referrer) -> a
    java.lang.String getCustomVariableParams(com.google.android.apps.analytics.Event) -> a
    void createX10Project(com.google.android.apps.analytics.CustomVariable[],java.lang.StringBuilder,int) -> a
    java.lang.String x10Escape(java.lang.String) -> a
    java.lang.String getEscapedCookieString(com.google.android.apps.analytics.Event,com.google.android.apps.analytics.Referrer) -> b
    java.lang.String encode(java.lang.String) -> b
com.google.android.apps.analytics.HitStore -> com.google.android.apps.analytics.q:
    void putEvent(com.google.android.apps.analytics.Event) -> a
    com.google.android.apps.analytics.Hit[] peekHits() -> a
    void deleteHit(long) -> a
    int getNumStoredHits() -> b
    boolean setReferrer(java.lang.String) -> a
    void startNewVisit() -> c
    void setAnonymizeIp(boolean) -> a
    void setSampleRate(int) -> a
com.google.android.apps.analytics.Item -> com.google.android.apps.analytics.u:
    java.lang.String orderId -> a
    java.lang.String itemSKU -> b
    java.lang.String itemName -> c
    java.lang.String itemCategory -> d
    double itemPrice -> e
    long itemCount -> f
    java.lang.String getOrderId() -> a
    java.lang.String getItemSKU() -> b
    java.lang.String getItemName() -> c
    java.lang.String getItemCategory() -> d
    double getItemPrice() -> e
    long getItemCount() -> f
com.google.android.apps.analytics.Item$1 -> com.google.android.apps.analytics.t:
com.google.android.apps.analytics.Item$Builder -> com.google.android.apps.analytics.b:
    java.lang.String orderId -> a
    java.lang.String itemSKU -> b
    double itemPrice -> c
    long itemCount -> d
    java.lang.String itemName -> e
    java.lang.String itemCategory -> f
    com.google.android.apps.analytics.Item$Builder setItemName(java.lang.String) -> a
    com.google.android.apps.analytics.Item$Builder setItemCategory(java.lang.String) -> b
    com.google.android.apps.analytics.Item build() -> a
    java.lang.String access$000(com.google.android.apps.analytics.Item$Builder) -> a
    java.lang.String access$100(com.google.android.apps.analytics.Item$Builder) -> b
    double access$200(com.google.android.apps.analytics.Item$Builder) -> c
    long access$300(com.google.android.apps.analytics.Item$Builder) -> d
    java.lang.String access$400(com.google.android.apps.analytics.Item$Builder) -> e
    java.lang.String access$500(com.google.android.apps.analytics.Item$Builder) -> f
com.google.android.apps.analytics.NetworkDispatcher -> com.google.android.apps.analytics.n:
    java.lang.String userAgent -> a
    org.apache.http.HttpHost googleAnalyticsHost -> b
    com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread dispatcherThread -> c
    boolean dryRun -> d
    void init(com.google.android.apps.analytics.Dispatcher$Callbacks) -> a
    void dispatchHits(com.google.android.apps.analytics.Hit[]) -> a
    void setDryRun(boolean) -> a
    boolean isDryRun() -> b
    void stop() -> a
    org.apache.http.HttpHost access$200(com.google.android.apps.analytics.NetworkDispatcher) -> a
com.google.android.apps.analytics.NetworkDispatcher$1 -> com.google.android.apps.analytics.f:
com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread -> com.google.android.apps.analytics.z:
    android.os.Handler handlerExecuteOnDispatcherThread -> a
    com.google.android.apps.analytics.PipelinedRequester pipelinedRequester -> b
    java.lang.String userAgent -> c
    int lastStatusCode -> d
    int maxEventsPerRequest -> e
    long retryInterval -> f
    com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$AsyncDispatchTask currentTask -> g
    com.google.android.apps.analytics.Dispatcher$Callbacks callbacks -> h
    com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$RequesterCallbacks requesterCallBacks -> i
    com.google.android.apps.analytics.NetworkDispatcher parent -> j
    void onLooperPrepared() -> onLooperPrepared
    void dispatchHits(com.google.android.apps.analytics.Hit[]) -> a
    com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$AsyncDispatchTask access$402(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread,com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$AsyncDispatchTask) -> a
    int access$500(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> a
    long access$600(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> b
    long access$630(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread,long) -> a
    long access$602(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread,long) -> b
    com.google.android.apps.analytics.NetworkDispatcher access$700(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> c
    com.google.android.apps.analytics.PipelinedRequester access$800(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> d
    com.google.android.apps.analytics.Dispatcher$Callbacks access$900(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> e
    int access$1000(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> f
    java.lang.String access$1100(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> g
    com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$RequesterCallbacks access$1200(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> h
    int access$1002(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread,int) -> a
    com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$AsyncDispatchTask access$400(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> i
    int access$502(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread,int) -> b
com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$AsyncDispatchTask -> com.google.android.apps.analytics.x:
    java.util.LinkedList hits -> b
    com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread this$0 -> a
    void run() -> run
    void dispatchSomePendingHits(boolean) -> a
    com.google.android.apps.analytics.Hit removeNextHit() -> a
com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$RequesterCallbacks -> com.google.android.apps.analytics.aa:
    com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread this$0 -> a
    void pipelineModeChanged(boolean) -> a
    void requestSent() -> a
    void serverError(int) -> a
com.google.android.apps.analytics.PersistentHitStore -> com.google.android.apps.analytics.y:
    com.google.android.apps.analytics.PersistentHitStore$DataBaseHelper databaseHelper -> a
    int storeId -> b
    long timestampFirst -> c
    long timestampPrevious -> d
    long timestampCurrent -> e
    int visits -> f
    int numStoredHits -> g
    boolean sessionStarted -> h
    boolean useStoredVisitorVars -> i
    boolean anonymizeIp -> j
    int sampleRate -> k
    java.lang.String CREATE_EVENTS_TABLE -> l
    java.lang.String CREATE_SESSION_TABLE -> m
    java.lang.String CREATE_CUSTOM_VARIABLES_TABLE -> n
    java.lang.String CREATE_CUSTOM_VAR_CACHE_TABLE -> o
    java.lang.String CREATE_TRANSACTION_EVENTS_TABLE -> p
    java.lang.String CREATE_ITEM_EVENTS_TABLE -> q
    java.lang.String CREATE_HITS_TABLE -> r
    void deleteHit(long) -> a
    com.google.android.apps.analytics.Hit[] peekHits() -> a
    com.google.android.apps.analytics.Hit[] peekHits(int) -> b
    com.google.android.apps.analytics.Event[] peekEvents(int,android.database.sqlite.SQLiteDatabase,int) -> a
    com.google.android.apps.analytics.Transaction getTransaction(long,android.database.sqlite.SQLiteDatabase) -> a
    com.google.android.apps.analytics.Item getItem(long,android.database.sqlite.SQLiteDatabase) -> b
    com.google.android.apps.analytics.CustomVariableBuffer getCustomVariables(long,android.database.sqlite.SQLiteDatabase) -> c
    void putEvent(com.google.android.apps.analytics.Event) -> a
    void putEvent(com.google.android.apps.analytics.Event,android.database.sqlite.SQLiteDatabase,boolean) -> a
    void putCustomVariables(com.google.android.apps.analytics.Event,android.database.sqlite.SQLiteDatabase) -> a
    com.google.android.apps.analytics.CustomVariableBuffer getVisitorVarBuffer() -> d
    int getNumStoredHits() -> b
    void loadExistingSession() -> e
    void loadExistingSession(android.database.sqlite.SQLiteDatabase) -> a
    void startNewVisit() -> c
    void storeUpdatedSession() -> f
    java.lang.String formatReferrer(java.lang.String) -> b
    com.google.android.apps.analytics.Referrer readCurrentReferrer(android.database.sqlite.SQLiteDatabase) -> b
    boolean setReferrerDatabase(android.database.sqlite.SQLiteDatabase,android.content.ContentValues) -> a
    boolean setReferrer(java.lang.String) -> a
    com.google.android.apps.analytics.Referrer getAndUpdateReferrer(android.database.sqlite.SQLiteDatabase) -> c
    void setAnonymizeIp(boolean) -> a
    void setSampleRate(int) -> a
    java.lang.String access$000() -> g
    java.lang.String access$100() -> h
    java.lang.String access$200() -> i
    java.lang.String access$300() -> j
    java.lang.String access$400() -> k
    java.lang.String access$500() -> l
    java.lang.String access$600() -> m
com.google.android.apps.analytics.PersistentHitStore$DataBaseHelper -> com.google.android.apps.analytics.l:
    int databaseVersion -> a
    com.google.android.apps.analytics.PersistentHitStore store -> b
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onOpen(android.database.sqlite.SQLiteDatabase) -> onOpen
    void createCustomVariableTables(android.database.sqlite.SQLiteDatabase) -> a
    void createECommerceTables(android.database.sqlite.SQLiteDatabase) -> b
    void createHitTable(android.database.sqlite.SQLiteDatabase) -> c
    void migrateEventsToHits(android.database.sqlite.SQLiteDatabase,int) -> a
    void createReferrerTable(android.database.sqlite.SQLiteDatabase) -> d
    void migratePreV4Referrer(android.database.sqlite.SQLiteDatabase) -> e
    void fixReferrerTable(android.database.sqlite.SQLiteDatabase) -> f
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void onDowngrade(android.database.sqlite.SQLiteDatabase,int,int) -> a
com.google.android.apps.analytics.PipelinedRequester -> com.google.android.apps.analytics.j:
    org.apache.http.impl.DefaultHttpClientConnection connection -> a
    com.google.android.apps.analytics.PipelinedRequester$Callbacks callbacks -> b
    int lastStatusCode -> c
    boolean canPipeline -> d
    org.apache.http.HttpHost host -> e
    org.apache.http.conn.scheme.SocketFactory socketFactory -> f
    void installCallbacks(com.google.android.apps.analytics.PipelinedRequester$Callbacks) -> a
    void addRequest(org.apache.http.HttpRequest) -> a
    void sendRequests() -> a
    void finishedCurrentRequests() -> b
    void maybeOpenConnection() -> c
    void closeConnection() -> d
com.google.android.apps.analytics.PipelinedRequester$Callbacks -> com.google.android.apps.analytics.ab:
    void pipelineModeChanged(boolean) -> a
    void serverError(int) -> a
    void requestSent() -> a
com.google.android.apps.analytics.Referrer -> com.google.android.apps.analytics.e:
    java.lang.String referrer -> a
    long timeStamp -> b
    int visit -> c
    int index -> d
    java.lang.String getReferrerString() -> a
    long getTimeStamp() -> b
    int getVisit() -> c
    int getIndex() -> d
com.google.android.apps.analytics.Transaction -> com.google.android.apps.analytics.r:
    java.lang.String orderId -> a
    java.lang.String storeName -> b
    double totalCost -> c
    double totalTax -> d
    double shippingCost -> e
    java.lang.String getOrderId() -> a
    java.lang.String getStoreName() -> b
    double getTotalCost() -> c
    double getTotalTax() -> d
    double getShippingCost() -> e
com.google.android.apps.analytics.Transaction$1 -> com.google.android.apps.analytics.a:
com.google.android.apps.analytics.Transaction$Builder -> com.google.android.apps.analytics.ac:
    java.lang.String orderId -> a
    java.lang.String storeName -> b
    double totalCost -> c
    double totalTax -> d
    double shippingCost -> e
    com.google.android.apps.analytics.Transaction$Builder setStoreName(java.lang.String) -> a
    com.google.android.apps.analytics.Transaction$Builder setTotalTax(double) -> a
    com.google.android.apps.analytics.Transaction$Builder setShippingCost(double) -> b
    com.google.android.apps.analytics.Transaction build() -> a
    java.lang.String access$000(com.google.android.apps.analytics.Transaction$Builder) -> a
    double access$100(com.google.android.apps.analytics.Transaction$Builder) -> b
    java.lang.String access$200(com.google.android.apps.analytics.Transaction$Builder) -> c
    double access$300(com.google.android.apps.analytics.Transaction$Builder) -> d
    double access$400(com.google.android.apps.analytics.Transaction$Builder) -> e
com.google.android.apps.analytics.Utils -> com.google.android.apps.analytics.w:
    java.util.Map parseURLParameters(java.lang.String) -> a
    java.lang.String addQueueTimeParameter(java.lang.String,long) -> a
com.halcyonwaves.apps.backupmyapps.BackupService -> com.halcyonwaves.apps.backupmyapps.BackupService:
    void onHandleIntent(android.content.Intent) -> onHandleIntent
com.halcyonwaves.apps.backupmyapps.IAsyncTaskFeedback -> com.halcyonwaves.apps.backupmyapps.h:
    void taskSuccessfull(java.lang.Object,java.lang.Object) -> a
    void taskFailed(java.lang.Object,java.lang.Object) -> b
com.halcyonwaves.apps.backupmyapps.MainActivity -> com.halcyonwaves.apps.backupmyapps.MainActivity:
    com.dropbox.client2.session.Session$AccessType DROPBOX_API_APP_ACCESS_TYPE -> a
    android.widget.Button buttonBackupInstalledApplications -> c
    android.widget.Button buttonRestoreInstalledApplications -> d
    android.widget.TextView textViewAdditionalInformation -> e
    android.app.Dialog dialogHelp -> f
    android.app.ProgressDialog backupProgressDialog -> g
    android.app.ProgressDialog uploadProgressDialog -> h
    java.io.File storagePath -> i
    android.content.SharedPreferences applicationPreferences -> j
    com.dropbox.client2.DropboxAPI dropboxDatabaseApi -> k
    com.google.android.apps.analytics.GoogleAnalyticsTracker analyticsTracker -> b
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onDestroy() -> onDestroy
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void taskSuccessfull(java.lang.Object,java.lang.Object) -> a
    void taskFailed(java.lang.Object,java.lang.Object) -> b
    void access$0(com.halcyonwaves.apps.backupmyapps.MainActivity,android.app.ProgressDialog) -> a
    java.io.File access$1(com.halcyonwaves.apps.backupmyapps.MainActivity) -> a
com.halcyonwaves.apps.backupmyapps.MainActivity$1 -> com.halcyonwaves.apps.backupmyapps.b:
    com.halcyonwaves.apps.backupmyapps.MainActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.halcyonwaves.apps.backupmyapps.MainActivity$2 -> com.halcyonwaves.apps.backupmyapps.a:
    com.halcyonwaves.apps.backupmyapps.MainActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.halcyonwaves.apps.backupmyapps.MainActivity$3 -> com.halcyonwaves.apps.backupmyapps.f:
    com.halcyonwaves.apps.backupmyapps.MainActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.halcyonwaves.apps.backupmyapps.MainActivity$4 -> com.halcyonwaves.apps.backupmyapps.e:
    com.halcyonwaves.apps.backupmyapps.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.halcyonwaves.apps.backupmyapps.MainActivity$5 -> com.halcyonwaves.apps.backupmyapps.d:
    com.halcyonwaves.apps.backupmyapps.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.halcyonwaves.apps.backupmyapps.MainActivity$6 -> com.halcyonwaves.apps.backupmyapps.c:
    com.halcyonwaves.apps.backupmyapps.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.halcyonwaves.apps.backupmyapps.MainActivity$7 -> com.halcyonwaves.apps.backupmyapps.g:
    com.halcyonwaves.apps.backupmyapps.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.halcyonwaves.apps.backupmyapps.RestoreSelectFileActivity -> com.halcyonwaves.apps.backupmyapps.RestoreSelectFileActivity:
    java.lang.String[] foundFilePathsArray -> a
    android.app.ProgressDialog restoreProgressDialog -> b
    android.app.ProgressDialog downloadFileProgressDialog -> c
    android.content.SharedPreferences applicationPreferences -> d
    com.dropbox.client2.DropboxAPI dropboxDatabaseApi -> e
    void onCreate(android.os.Bundle) -> onCreate
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void taskSuccessfull(java.lang.Object,java.lang.Object) -> a
    void taskFailed(java.lang.Object,java.lang.Object) -> b
com.halcyonwaves.apps.backupmyapps.RestoreSelectionActivity -> com.halcyonwaves.apps.backupmyapps.RestoreSelectionActivity:
    java.lang.String[] packageNames -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void installPackageFromMarket(java.lang.String) -> a
com.halcyonwaves.apps.backupmyapps.SettingsActivity -> com.halcyonwaves.apps.backupmyapps.SettingsActivity:
    android.preference.Preference buildVersionPreference -> a
    android.preference.CheckBoxPreference loginIntoDropbox -> b
    android.content.SharedPreferences applicationPreferences -> c
    com.dropbox.client2.DropboxAPI dropboxDatabaseApi -> d
    java.lang.String getApplicationVersion() -> a
    void onResume() -> onResume
    void onCreate(android.os.Bundle) -> onCreate
    java.lang.String access$0(com.halcyonwaves.apps.backupmyapps.SettingsActivity) -> a
    android.preference.CheckBoxPreference access$1(com.halcyonwaves.apps.backupmyapps.SettingsActivity) -> b
    com.dropbox.client2.DropboxAPI access$2(com.halcyonwaves.apps.backupmyapps.SettingsActivity) -> c
    android.content.SharedPreferences access$3(com.halcyonwaves.apps.backupmyapps.SettingsActivity) -> d
com.halcyonwaves.apps.backupmyapps.SettingsActivity$1 -> com.halcyonwaves.apps.backupmyapps.i:
    com.halcyonwaves.apps.backupmyapps.SettingsActivity this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.halcyonwaves.apps.backupmyapps.SettingsActivity$2 -> com.halcyonwaves.apps.backupmyapps.j:
    com.halcyonwaves.apps.backupmyapps.SettingsActivity this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.halcyonwaves.apps.backupmyapps.packages.PackageInformation -> com.halcyonwaves.apps.backupmyapps.b.a:
    java.lang.String appname -> a
    java.lang.String pname -> b
    java.lang.String versionName -> c
    int versionCode -> d
    android.graphics.drawable.Drawable icon -> e
    android.content.pm.ApplicationInfo applicationInfo -> f
    java.lang.String getIcon() -> a
    boolean isSystemComponent() -> b
    java.lang.String getPackageName() -> c
    java.lang.String getApplicationName() -> d
    int getVersionCode() -> e
    java.lang.String getVersionName() -> f
com.halcyonwaves.apps.backupmyapps.packages.PackageInformationManager -> com.halcyonwaves.apps.backupmyapps.b.b:
    android.content.pm.PackageManager internalPackageManager -> a
    java.util.ArrayList getInstalledApps() -> a
com.halcyonwaves.apps.backupmyapps.tasks.DownloadFromDropboxTask -> com.halcyonwaves.apps.backupmyapps.a.b:
    android.content.SharedPreferences applicationPreferences -> a
    com.dropbox.client2.DropboxAPI dropboxDatabaseApi -> b
    com.halcyonwaves.apps.backupmyapps.IAsyncTaskFeedback usedFeedbackClass -> c
    java.lang.String fileToRestore -> d
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.halcyonwaves.apps.backupmyapps.tasks.GatherBackupInformationTask -> com.halcyonwaves.apps.backupmyapps.a.a:
    java.io.File storagePath -> a
    android.content.Context applicationContext -> b
    java.lang.String backupFilename -> c
    com.halcyonwaves.apps.backupmyapps.packages.PackageInformationManager packageInformationManager -> d
    com.halcyonwaves.apps.backupmyapps.IAsyncTaskFeedback feedbackClass -> e
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.halcyonwaves.apps.backupmyapps.tasks.RestoreBackupDataTask -> com.halcyonwaves.apps.backupmyapps.a.c:
    java.io.File backupFile -> a
    com.halcyonwaves.apps.backupmyapps.IAsyncTaskFeedback feedbackClass -> b
    java.util.HashMap itemList -> c
    org.w3c.dom.Document XMLfromString(java.lang.String) -> a
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.halcyonwaves.apps.backupmyapps.tasks.UploadToDropboxTask -> com.halcyonwaves.apps.backupmyapps.a.d:
    android.content.SharedPreferences applicationPreferences -> a
    com.dropbox.client2.DropboxAPI dropboxDatabaseApi -> b
    com.halcyonwaves.apps.backupmyapps.IAsyncTaskFeedback usedFeedbackClass -> c
    java.lang.String fileToUpload -> d
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.halcyonwaves.apps.backupmyapps.utils.Base64 -> com.halcyonwaves.apps.backupmyapps.c.b:
    char[] CA -> a
    int[] IA -> b
    char[] encodeToChar(byte[],boolean) -> a
    java.lang.String encodeToString(byte[],boolean) -> b
com.halcyonwaves.apps.backupmyapps.utils.PackageVersion -> com.halcyonwaves.apps.backupmyapps.c.a:
    int majorVersion -> a
    int minorVersion -> b
    int buildVersion -> c
    boolean equals(com.halcyonwaves.apps.backupmyapps.utils.PackageVersion) -> a
org.json.simple.JSONArray -> a.a.a.a:
    java.lang.String toJSONString(java.util.List) -> a
    java.lang.String toJSONString() -> a
    java.lang.String toString() -> toString
org.json.simple.JSONAware -> a.a.a.d:
    java.lang.String toJSONString() -> a
org.json.simple.JSONObject -> a.a.a.b:
    java.lang.String toJSONString(java.util.Map) -> a
    java.lang.String toJSONString() -> a
    java.lang.String toJSONString(java.lang.String,java.lang.Object,java.lang.StringBuffer) -> a
    java.lang.String toString() -> toString
org.json.simple.JSONValue -> a.a.a.c:
    java.lang.String toJSONString(java.lang.Object) -> a
    java.lang.String escape(java.lang.String) -> a
    void escape(java.lang.String,java.lang.StringBuffer) -> a
org.json.simple.parser.ContainerFactory -> a.a.a.a.d:
    java.util.Map createObjectContainer() -> a
    java.util.List creatArrayContainer() -> b
org.json.simple.parser.JSONParser -> a.a.a.a.e:
    java.util.LinkedList handlerStatusStack -> a
    org.json.simple.parser.Yylex lexer -> b
    org.json.simple.parser.Yytoken token -> c
    int status -> d
    int peekStatus(java.util.LinkedList) -> a
    void reset() -> a
    void reset(java.io.Reader) -> a
    int getPosition() -> b
    java.lang.Object parse(java.io.Reader) -> b
    java.lang.Object parse(java.io.Reader,org.json.simple.parser.ContainerFactory) -> a
    void nextToken() -> c
    java.util.Map createObjectContainer(org.json.simple.parser.ContainerFactory) -> a
    java.util.List createArrayContainer(org.json.simple.parser.ContainerFactory) -> b
org.json.simple.parser.ParseException -> a.a.a.a.b:
    int errorType -> a
    java.lang.Object unexpectedObject -> b
    int position -> c
    java.lang.String toString() -> toString
org.json.simple.parser.Yylex -> a.a.a.a.a:
    int[] ZZ_LEXSTATE -> a
    char[] ZZ_CMAP -> b
    int[] ZZ_ACTION -> c
    int[] ZZ_ROWMAP -> d
    int[] ZZ_TRANS -> e
    java.lang.String[] ZZ_ERROR_MSG -> f
    int[] ZZ_ATTRIBUTE -> g
    java.io.Reader zzReader -> h
    int zzState -> i
    int zzLexicalState -> j
    char[] zzBuffer -> k
    int zzMarkedPos -> l
    int zzCurrentPos -> m
    int zzStartRead -> n
    int zzEndRead -> o
    int yyline -> p
    int yychar -> q
    int yycolumn -> r
    boolean zzAtBOL -> s
    boolean zzAtEOF -> t
    java.lang.StringBuffer sb -> u
    int[] zzUnpackAction() -> d
    int zzUnpackAction(java.lang.String,int,int[]) -> a
    int[] zzUnpackRowMap() -> e
    int zzUnpackRowMap(java.lang.String,int,int[]) -> b
    int[] zzUnpackAttribute() -> f
    int zzUnpackAttribute(java.lang.String,int,int[]) -> c
    int getPosition() -> a
    char[] zzUnpackCMap(java.lang.String) -> a
    boolean zzRefill() -> g
    void yyreset(java.io.Reader) -> a
    void yybegin(int) -> a
    java.lang.String yytext() -> b
    char yycharat(int) -> b
    void zzScanError(int) -> c
    org.json.simple.parser.Yytoken yylex() -> c
org.json.simple.parser.Yytoken -> a.a.a.a.c:
    int type -> a
    java.lang.Object value -> b
    java.lang.String toString() -> toString
